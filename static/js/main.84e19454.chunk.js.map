{"version":3,"sources":["components/searchBox/SearchBox.tsx","redux/actions.ts","redux/constants.ts","components/card/Card.tsx","components/cardList/CardList.tsx","pages/Home.tsx","api/robotsApi.ts","App.tsx","redux/reducers.ts","saga/sagas.tsx","redux/store.ts","serviceWorker.ts","index.tsx"],"names":["SearchBox","dispatch","useDispatch","placeholder","onChange","e","type","payload","target","value","trim","Card","id","name","email","username","website","phone","className","alt","src","CardList","robots","useSelector","state","robotRed","searchField","searchRed","search","filteredRobots","filter","robot","toLowerCase","includes","map","_","index","key","Home","robotsApiCall","link","a","fetch","response","json","Error","App","initialRobotState","initialSearchState","fetchRobots","robotsSaga","action","put","takeEvery","reducer","combineReducers","Object","assign","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84e19454.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setSearchField } from '../../redux/actions';\r\n\r\nexport default function SearchBox() {\r\n\r\n    const dispatch = useDispatch();\r\n    const onChange = (e : React.ChangeEvent<HTMLInputElement>) : void => {\r\n        dispatch(setSearchField(e.target.value.trim())); \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input \r\n            placeholder='search robots'  \r\n            onChange={onChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import { IAction } from './../interfaces/Interfaces';\r\nimport { CHANGE_SEARCHFIELD, REQUEST_ROBOTS, SUCCESS_ROBOTS } from './constants';\r\n\r\nexport const setSearchField = (text : string) : IAction => ({\r\n    type : CHANGE_SEARCHFIELD,\r\n    payload : text\r\n});\r\n\r\nexport const requestRobots = (link : string) : IAction => ({\r\n    type : REQUEST_ROBOTS,\r\n    link : link\r\n});\r\n\r\nexport const successRobots = (data : JSON) : IAction => ({\r\n    type : SUCCESS_ROBOTS,\r\n    payload : data\r\n});\r\n\r\n\r\n\r\n","export const CHANGE_SEARCHFIELD : string = 'CHANGE_SEARCHFIELD';\r\nexport const REQUEST_ROBOTS : string = 'REQUEST_ROBOTS';\r\nexport const SUCCESS_ROBOTS : string = 'SUCCESS_ROBOTS';","import React from 'react';\r\nimport './Card.scss';\r\n\r\nexport default function Card({ id, name, email, username, website, phone} \r\n  : { id : number, name : string, email : string, username : string, phone : string, website : string}) {\r\n    return (\r\n        <div className='tc bg-moon-gray br3 pa3 ma2 bw2 shadow-5 card-rotate'>\r\n          <div className='card-rotate__side card-rotate__side--front'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n          </div>\r\n          <div className='card-rotate__side card-rotate__side--back'>\r\n            <h2>{username}</h2>\r\n            <p>{website}</p>\r\n            <p>{phone}</p>\r\n          </div>\r\n      </div>     \r\n    )\r\n}\r\n","import React, { Fragment} from 'react';\r\nimport Card from '../card/Card';\r\nimport { useSelector} from 'react-redux';\r\nimport { IRobot } from '../../interfaces/Interfaces';\r\n\r\nexport default function CardList() {\r\n    const robots = useSelector((state : any) => state.robotRed.robots);\r\n    const searchField = useSelector((state : any) => state.searchRed.search);\r\n    const filteredRobots : Array<IRobot> = robots.filter((robot : IRobot) => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                filteredRobots?.map((_ : any, index : number) => {\r\n                    return(\r\n                        <Card \r\n                        key={index} \r\n                        id={filteredRobots[index].id} \r\n                        name={filteredRobots[index].name} \r\n                        email={filteredRobots[index].email}\r\n                        username={filteredRobots[index].username}\r\n                        phone={filteredRobots[index].phone}\r\n                        website={filteredRobots[index].website}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport SearchBox from '../components/searchBox/SearchBox'\r\nimport CardList from '../components/cardList/CardList'\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox/>\r\n        <div className='flex-cardlist'>\r\n          <CardList/>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","export const link : string = 'https://jsonplaceholder.typicode.com/users';\r\n\r\nconst robotsApiCall = async (link ?: string) : Promise<JSON> => {\r\n    try {\r\n        const response = await fetch(link!);\r\n        return await response.json();   \r\n    } catch (error) {\r\n        throw new Error('Api failed');\r\n    }\r\n}\r\n\r\nexport default robotsApiCall;","import React from 'react';\nimport './App.css';\nimport Home from './pages/Home';\nimport { useDispatch} from 'react-redux';\nimport { requestRobots } from './redux/actions';\nimport { link } from './api/robotsApi';\n\nfunction App() {\n\n  const dispatch = useDispatch();\n  dispatch(requestRobots(link));\n    \n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","import { IRobot, IAction } from './../interfaces/Interfaces';\r\nimport { SUCCESS_ROBOTS, CHANGE_SEARCHFIELD } from './constants';\r\n\r\nconst initialRobotState = {\r\n    robots : [] as Array<IRobot>\r\n}\r\n\r\nconst initialSearchState = {\r\n    search : '' as string\r\n}\r\n\r\nexport const robotReducer = (state = initialRobotState, action: IAction) => {\r\n    switch (action.type) {\r\n        case SUCCESS_ROBOTS : \r\n            return Object.assign({}, state, {robots : action.payload});\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const searchReducer = (state = initialSearchState, action: IAction) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCHFIELD : \r\n            return  Object.assign({}, state, {search : action.payload});\r\n        default : \r\n            return state;\r\n    }\r\n}\r\n","import { put, takeEvery } from 'redux-saga/effects';\r\nimport robotsApiCall from './../api/robotsApi';\r\nimport { successRobots } from './../redux/actions';\r\nimport { REQUEST_ROBOTS } from './../redux/constants';\r\nimport { IAction } from '../interfaces/Interfaces';\r\n\r\nfunction* fetchRobots(action : IAction){\r\n    try{\r\n        const robots : JSON = yield robotsApiCall(action.link!);\r\n        yield put(successRobots(robots));\r\n    } catch (e) {\r\n        throw new Error('Api saga failed')\r\n    }\r\n}\r\n\r\nfunction* robotsSaga(){\r\n    yield takeEvery(REQUEST_ROBOTS, fetchRobots);\r\n}\r\n\r\nexport default robotsSaga;","import { createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport { robotReducer, searchReducer } from './reducers';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport robotsSaga from './../saga/sagas';\r\n\r\nconst reducer = combineReducers({robotRed : robotReducer, searchRed : searchReducer});\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware)); \r\nsagaMiddleware.run(robotsSaga);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}